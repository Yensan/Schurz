#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# https://www.cnblogs.com/nanrou/p/7026789.html
import multiprocessing, os

# ----- debug --------
# debug  = False
# reload = False  # 一般设为False，supervisor负责进程的重启
# spew = True  # 跟踪程序执行的每一行。
# check_config = True # 开启后，运行只是检查配置，并不真的运行

# ----- server socket --------
bind = '0.0.0.0:8000' # 绑定ip和端口号
# bind = 'unix:/tmp/AiService_gunicorn.sock'  # 用 Unix-socket 会更好
backlog = 512 # 监听队列

# ----- worker 进程 --------
# daemon = True
# proc_name = 'BigBro'  # 进程名
workers = 1   # multiprocessing.cpu_count() * 2 + 1    #进程数
worker_class = 'gevent' # 使用的模式。有很多模式，使用了gthread就要指定 threads
# threads = 3 # 使用了 gthread，最好指定每个进程开启的线程数
# worker_connections = 100 # 客户端最大同时连接数，默认1000。只适用于eventlet， gevent工作方式。
# max_requests = 0 # worker重启之前处理的最大requests数， 缺省值为0表示自动重启disabled。主要是防止内存泄露。
# max_requests_jitter = 0 # 抖动参数，防止worker全部同时重启。
timeout = 30  # 超过这么多秒后，进程将被杀掉，并重新启动。一般设定为30秒；
# graceful_timeout = 30 # 接收到restart信号后，worker可以在graceful_timeout时间内，继续处理完当前requests。
# keepalive = 2 # server端保持连接时间。

# ----- security (SSL) --------
# cert_reqs = 0
# certfile = None # SSL certificate file
# ssl_version = 2
# ca_certs = None

# ----- server 机制 --------
chdir = os.path.dirname(os.path.abspath(__file__)) # 在app加载之前，进入到此目录。可以写成绝对路径
# sendfile = None #  系统底层拷贝数据方式，提供performance。
# worker_tmp_dir 临时工作目录。
# raw_env = [  # shell 环境变量
#    'python=/home/ac/Desktop/venv36_linux_flask/bin/python',
# ]
# preload_app = False # 在worker进程被复制（派生）之前载入应用的代码。通过预加载应用，可以节省内存资源和提高服务启动时间。当然，如果你将应用加载进worker进程这个动作延后，那么重启worker将会容易很多。
# pidfile = '/tmp/gunicorn.pid' # pid存储文件路径。
# pythonpath 附加到python path的目录列表。
# limit_request_line = 4094 # HTTP请求头的行数的最大大小，此参数用于限制HTTP请求行的允许大小，默认值4094。值是0~8190的数字。
# limit_request_fields = 100 # 限制HTTP请求中请求头字段的数量。此字段用于限制请求头字段的数量以防止DDOS攻击，默认情况下，这个值为100，这个值不能超过32768
# limit_request_field_size= 8190 # 限制HTTP请求中请求头的大小，默认情况下这个值为8190字节。值是一个整数或者0，当该值为0时，表示将对请求头大小不做限制
# forwarded_allow_ips = '127.0.0.1'  # 比如在跟Nginx一起部署的时候，如果Nginx不在本机上（localhost），为了避免伪造host的攻击，可以指定只接收从那些指定的地址传来的连接，而如果Nginx就在本机上，就直接按默认的127.0.0.1就行了。

# ----- log --------
loglevel = 'info' #日志级别，这个日志级别指的是错误日志的级别，而访问日志的级别无法设置
# 设置 gunicorn access_log 格式，errorlog日志无法设置格式
access_log_format = '%(t)s %(p)s %(h)s "%(r)s" %(s)s %(L)s %(b)s %(f)s" "%(a)s"'
# 其每个选项的含义如下：
# h          remote address
# l          '-'
# u          currently '-', may be user name in future releases
# t          date of the request
# r          status line (e.g. ``GET / HTTP/1.1``)
# s          status
# b          response length or '-'
# f          referer
# a          user agent
# T          request time in seconds
# D          request time in microseconds
# L          request time in decimal seconds
# p          process ID
# accesslog = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
#                        'gunicorn_access.log')   #访问日志文件
accesslog = '../gunicorn_access.log'
# errorlog = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
#                        'gunicorn_error.log')    #错误日志文件
errorlog = '../gunicorn_error.log'

# ----- Server Hooks 服务的钩子函数 --------
# 略
